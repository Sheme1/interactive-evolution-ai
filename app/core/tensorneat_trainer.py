"""–í—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±—É—á–µ–Ω–∏—è —Å TensorNEAT.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π API –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è
—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º TensorNEAT Pipeline –∏ GPU-—É—Å–∫–æ—Ä–µ–Ω–∏—è.
"""
from __future__ import annotations
from pathlib import Path
from typing import TYPE_CHECKING
import pickle

import jax
from jax import random

from tensorneat.pipeline import Pipeline
from tensorneat.algorithm.neat import NEAT
from tensorneat.genome import DefaultGenome, BiasNode
from tensorneat.common import ACT, AGG

from .jax_environment import EnvConfig
from .tensorneat_problem import GridBattleProblem

if TYPE_CHECKING:
    from ..utils.settings import Settings


class TensorNEATTrainer:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –æ–±—É—á–µ–Ω–∏—è —Å TensorNEAT Pipeline.

    –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –Ω–∞–¥ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º EvolutionManager:
    - GPU-—É—Å–∫–æ—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑ JAX (–¥–æ 500x –±—ã—Å—Ç—Ä–µ–µ)
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ü–µ–Ω–∫–∏ –ø–æ–ø—É–ª—è—Ü–∏–∏
    - JIT-–∫–æ–º–ø–∏–ª—è—Ü–∏—è –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    - –ü–æ–ª–Ω–∞—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ JAX random keys
    """

    def __init__(self, settings: "Settings", seed: int = 42):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞.

        Parameters
        ----------
        settings : Settings
            –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ settings.ini.
        seed : int
            Seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
        """
        self.settings = settings
        self.seed = seed

        # –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ settings
        self.env_config = EnvConfig(
            field_size=settings.get_int("Field", "field_size"),
            food_quantity=settings.get_int("Simulation", "food_quantity"),
            energy_max=self._compute_energy_max(settings),
            obstacles_percentage=self._parse_percentage(
                settings.get_str("Environment", "obstacles_percentage")
            ),
            teleporters_count=settings.get_int("Environment", "teleporters_count"),
        )

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è
        self.population_size = settings.get_int("Simulation", "population_size")
        self.generations = settings.get_int("Simulation", "generations")
        self.max_steps = int(self.env_config.energy_max * 1.5)

        # –°–æ–∑–¥–∞—ë–º TensorNEAT Pipeline
        self.pipeline = self._create_pipeline()

    def _compute_energy_max(self, settings: "Settings") -> int:
        """–í—ã—á–∏—Å–ª–∏—Ç—å ENERGY_MAX –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–∫–æ–ø–∏—è –ª–æ–≥–∏–∫–∏ –∏–∑ constants.py)."""
        field_size = settings.get_int("Field", "field_size")
        food_quantity = settings.get_int("Simulation", "food_quantity")

        avg_dist = field_size / 4.0
        avg_food_per_agent = food_quantity / 2.0

        if avg_food_per_agent > 0:
            energy = int(avg_dist / avg_food_per_agent)
        else:
            energy = 10

        return max(10, min(energy, 50))

    def _parse_percentage(self, percentage_str: str) -> float:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –≤ float (–Ω–∞–ø—Ä–∏–º–µ—Ä, "5%" -> 0.05)."""
        try:
            return float(percentage_str.strip().replace("%", "")) / 100.0
        except (ValueError, TypeError):
            return 0.0

    def _create_pipeline(self) -> Pipeline:
        """–°–æ–∑–¥–∞—Ç—å TensorNEAT Pipeline —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ settings.ini."""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –≤—Ö–æ–¥–æ–≤/–≤—ã—Ö–æ–¥–æ–≤
        num_inputs = 100  # 5x5x4 –∫–∞–Ω–∞–ª–æ–≤ —ç–≥–æ—Ü–µ–Ω—Ç—Ä–∏—á–µ—Å–∫–æ–≥–æ –æ–∫–Ω–∞
        num_outputs = 2  # dx, dy –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è

        # –°–æ–∑–¥–∞—ë–º –∞–ª–≥–æ—Ä–∏—Ç–º NEAT
        algorithm = NEAT(
            pop_size=self.population_size,
            species_size=20,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–æ–≤
            survival_threshold=0.2,  # 20% –ª—É—á—à–∏—Ö –≤—ã–∂–∏–≤–∞—é—Ç
            compatibility_threshold=4.0,  # –ü–æ—Ä–æ–≥ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–ª—è –≤–∏–¥–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
            genome=DefaultGenome(
                num_inputs=num_inputs,
                num_outputs=num_outputs,
                init_hidden_layers=(),  # –ù–∞—á–∏–Ω–∞–µ–º –±–µ–∑ —Å–∫—Ä—ã—Ç—ã—Ö —Å–ª–æ—ë–≤
                node_gene=BiasNode(
                    activation_options=ACT.tanh,  # –§—É–Ω–∫—Ü–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                    aggregation_options=AGG.sum,  # –ê–≥—Ä–µ–≥–∞—Ü–∏—è –≤—Ö–æ–¥–æ–≤
                ),
                output_transform=ACT.tanh,  # –í—ã—Ö–æ–¥–Ω–æ–π —Å–ª–æ–π: tanh –¥–ª—è [-1, 1]
            ),
        )

        # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–±–ª–µ–º—É (–æ–∫—Ä—É–∂–µ–Ω–∏–µ)
        problem = GridBattleProblem(
            env_config=self.env_config,
            max_steps=self.max_steps,
            num_matches=5,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞–∂–¥–æ–≥–æ –≥–µ–Ω–æ–º–∞
        )

        # –°–æ–∑–¥–∞—ë–º Pipeline
        pipeline = Pipeline(
            algorithm=algorithm,
            problem=problem,
            seed=self.seed,
            generation_limit=self.generations,
            fitness_target=100.0,  # –¶–µ–ª–µ–≤–æ–π —Ñ–∏—Ç–Ω–µ—Å (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)
        )

        return pipeline

    def run_training(self, verbose: bool = True) -> tuple:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è.

        Parameters
        ----------
        verbose : bool
            –í—ã–≤–æ–¥–∏—Ç—å –ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å.

        Returns
        -------
        tuple
            (final_state, best_genome) - —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ª—É—á—à–∏–π –≥–µ–Ω–æ–º.
        """
        if verbose:
            print("=" * 60)
            print("üöÄ –ó–ê–ü–£–°–ö –û–ë–£–ß–ï–ù–ò–Ø –° TENSORNEAT")
            print("=" * 60)
            print(f"–ü–æ–ø—É–ª—è—Ü–∏—è: {self.population_size}")
            print(f"–ü–æ–∫–æ–ª–µ–Ω–∏—è: {self.generations}")
            print(f"Seed: {self.seed}")
            print(f"–í—Ö–æ–¥—ã: {100}, –í—ã—Ö–æ–¥—ã: {2}")
            print(f"–†–∞–∑–º–µ—Ä –ø–æ–ª—è: {self.env_config.field_size}")
            print(f"–≠–Ω–µ—Ä–≥–∏—è: {self.env_config.energy_max}")
            print(f"Max —à–∞–≥–æ–≤: {self.max_steps}")

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ JAX —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
            devices = jax.devices()
            print(f"\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ JAX: {len(devices)}")
            for i, device in enumerate(devices):
                print(f"  [{i}] {device.device_kind}: {device}")

            print("=" * 60)
            print()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Pipeline
        state = self.pipeline.setup()

        if verbose:
            print("‚úÖ Pipeline –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            print("üèÉ –ó–∞–ø—É—Å–∫ —ç–≤–æ–ª—é—Ü–∏–∏...\n")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
        try:
            state, best = self.pipeline.auto_run(state)

            if verbose:
                print("\n‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                print(f"–õ—É—á—à–∏–π —Ñ–∏—Ç–Ω–µ—Å: {best}")

            return state, best

        except KeyboardInterrupt:
            if verbose:
                print("\n‚ö†Ô∏è  –û–±—É—á–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return state, None

    def save_best_genome(self, state, output_dir: Path | str = "checkpoints") -> Path:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª—É—á—à–∏–π –≥–µ–Ω–æ–º.

        Parameters
        ----------
        state
            –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Pipeline.
        output_dir : Path | str
            –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.

        Returns
        -------
        Path
            –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É.
        """
        output_dir = Path(output_dir)
        output_dir.mkdir(parents=True, exist_ok=True)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        filename = f"best_genome_tensorneat_gen{state.generation}.pkl"
        filepath = output_dir / filename

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ü–µ–ª–∏–∫–æ–º (—Å–æ–¥–µ—Ä–∂–∏—Ç –ª—É—á—à–∏–π –≥–µ–Ω–æ–º)
        with open(filepath, "wb") as f:
            pickle.dump(state, f)

        print(f"üíæ –õ—É—á—à–∏–π –≥–µ–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {filepath}")

        return filepath

    def load_genome(self, filepath: Path | str):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –≥–µ–Ω–æ–º –¥–ª—è –¥–æ–æ–±—É—á–µ–Ω–∏—è –∏–ª–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏.

        Parameters
        ----------
        filepath : Path | str
            –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –≥–µ–Ω–æ–º–æ–º.

        Returns
        -------
        Any
            –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Pipeline.
        """
        with open(filepath, "rb") as f:
            state = pickle.load(f)

        print(f"üìÇ –ì–µ–Ω–æ–º –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑: {filepath}")
        return state


def create_trainer_from_settings(settings: "Settings", seed: int = 42) -> TensorNEATTrainer:
    """–§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞ –∏–∑ Settings.

    Parameters
    ----------
    settings : Settings
        –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ settings.ini.
    seed : int
        Seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏.

    Returns
    -------
    TensorNEATTrainer
        –ì–æ—Ç–æ–≤—ã–π –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Ç—Ä–µ–Ω–µ—Ä.
    """
    return TensorNEATTrainer(settings, seed=seed)

"""–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ Kaggle/Colab —Å TensorNEAT.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è –æ–±–ª–∞—á–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è:
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç TensorNEAT —Å GPU-—É—Å–∫–æ—Ä–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ JAX
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (CPU/GPU/TPU)
- –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –º–µ—Å—Ç–æ

–í–ê–ñ–ù–û: –ù–∞ Kaggle/Colab –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è GPU –≤–µ—Ä—Å–∏—è JAX –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Å–∫–æ—Ä–µ–Ω–∏—è.
–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:
    pip install jax[cuda12] jaxlib  # –î–ª—è CUDA 12
    pip install git+https://github.com/EMI-Group/tensorneat.git
"""
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
# –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–∫ —Å–∫—Ä–∏–ø—Ç–∞, —Ç–∞–∫ –∏ Jupyter Notebook
try:
    # –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∫ —Å–∫—Ä–∏–ø—Ç
    project_root = Path(__file__).parent
except NameError:
    # –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ Jupyter/Kaggle
    project_root = Path.cwd()

sys.path.insert(0, str(project_root))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º TensorNEAT —Ç—Ä–µ–Ω–µ—Ä –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ä–æ–≥–æ EvolutionManager
from app.core.tensorneat_trainer import create_trainer_from_settings
from app.utils.settings import Settings

def setup_for_cloud():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –æ–±–ª–∞—á–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å TensorNEAT."""
    print("=" * 60)
    print("üöÄ –ù–ê–°–¢–†–û–ô–ö–ê –û–ë–õ–ê–ß–ù–û–ì–û –û–ë–£–ß–ï–ù–ò–Ø (TENSORNEAT)")
    print("=" * 60)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å JAX –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    try:
        import jax
        devices = jax.devices()
        print(f"‚úÖ JAX —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –≤–µ—Ä—Å–∏—è: {jax.__version__}")
        print(f"üìä –î–æ—Å—Ç—É–ø–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ JAX: {len(devices)}")
        for i, device in enumerate(devices):
            device_type = device.device_kind
            print(f"   [{i}] {device_type}: {device}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ GPU/TPU
        has_accelerator = any(d.device_kind in ['gpu', 'tpu'] for d in devices)
        if has_accelerator:
            print("üéâ –û–±–Ω–∞—Ä—É–∂–µ–Ω GPU/TPU! –û–±—É—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–ø–ø–∞—Ä–∞—Ç–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ.")
        else:
            print("‚ö†Ô∏è  GPU/TPU –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω. –û–±—É—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –Ω–∞ CPU (–º–µ–¥–ª–µ–Ω–Ω–µ–µ).")

    except ImportError:
        print("‚ùå JAX –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
        print("   pip install jax[cuda12] jaxlib  # –î–ª—è CUDA 12")
        print("   pip install git+https://github.com/EMI-Group/tensorneat.git")
        sys.exit(1)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–¥–µ—Ä (–¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)
    cpu_count = os.cpu_count() or 1
    print(f"\nüíª –î–æ—Å—Ç—É–ø–Ω–æ CPU —è–¥–µ—Ä: {cpu_count}")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
    try:
        root = Path(__file__).parent
    except NameError:
        root = Path.cwd()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    config_path = root / "config" / "settings.ini"
    settings = Settings(config_path)

    # –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    print("\nüìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è:")
    print(f"   - –ü–æ–ø—É–ª—è—Ü–∏—è: {settings.get_int('Simulation', 'population_size')}")
    print(f"   - –ü–æ–∫–æ–ª–µ–Ω–∏—è: {settings.get_int('Simulation', 'generations')}")
    print(f"   - –†–∞–∑–º–µ—Ä –ø–æ–ª—è: {settings.get_int('Field', 'field_size')}")
    print(f"   - –ï–¥–∞: {settings.get_int('Simulation', 'food_quantity')}")
    print(f"   - –†–µ—Å–ø–∞–≤–Ω –µ–¥—ã: {settings.get_bool('Simulation', 'food_respawn')}")

    print("\n‚ö° –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê TENSORNEAT:")
    print("   - GPU-—É—Å–∫–æ—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑ JAX (–¥–æ 500x –±—ã—Å—Ç—Ä–µ–µ)")
    print("   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ø—É–ª—è—Ü–∏–∏")
    print("   - JIT-–∫–æ–º–ø–∏–ª—è—Ü–∏—è –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")

    print("=" * 60)
    print()

    return settings

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–ª–∞—á–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è —Å TensorNEAT."""
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    settings = setup_for_cloud()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
    try:
        root = Path(__file__).parent
    except NameError:
        root = Path.cwd()

    # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    checkpoints_dir = root / "checkpoints"
    checkpoints_dir.mkdir(exist_ok=True)

    print("üéØ –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è —Å TensorNEAT...\n")

    try:
        # –°–æ–∑–¥–∞—ë–º TensorNEAT —Ç—Ä–µ–Ω–µ—Ä
        trainer = create_trainer_from_settings(settings, seed=42)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
        state, best = trainer.run_training(verbose=True)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª—É—á—à–∏–π –≥–µ–Ω–æ–º
        if state is not None:
            save_path = trainer.save_best_genome(state, output_dir=checkpoints_dir)
            print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {save_path}")

        print("\n‚úÖ –û–±—É—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print(f"üèÜ –õ—É—á—à–∏–π —Ñ–∏—Ç–Ω–µ—Å: {best}")

    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –û–±—É—á–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        raise

if __name__ == "__main__":
    main()